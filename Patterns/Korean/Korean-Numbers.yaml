---
#ISO 639-2 Code
LangMarker: Kor
#Does this language use non-whitespace-separated numbers?
CompoundNumberLanguage: !bool true
#Does this culture uses period and comma intercheangeably as decimal separator?
MultiDecimalSeparatorCulture: !bool false
DecimalSeparatorChar: !char '.'
FractionMarkerToken: ''
NonDecimalSeparatorChar: !char ' '
HalfADozenText: ''
WordSeparatorToken: ''
# TODO: modify below char according to the counterpart in Chinese
ZeroChar: !char '0'
PairChar: !char '?'
RoundNumberMap: !dictionary
  types: [string, long]
  entries:
    k: 1000
    m: 1000000
    g: 1000000000
    t: 1000000000000
RoundNumberMapChar: !dictionary
  types: [char, long]
  entries:
    십: 10
    백: 100
    천: 1000
    만: 10000
    억: 100000000
    조: 1000000000000
    경: 10000000000000000
    열: 10
ZeroToNineMap: !dictionary
  types: [char, double]
  entries:
    영: 0
    일: 1
    하: 1
    한: 1
    이: 2
    두: 2
    삼: 3    
    셋: 3
    세: 3
    사: 4
    네: 4
    오: 5
    다: 5
    육: 6
    여: 6
    칠: 7
    곱: 7
    팔: 8
    덟: 8
    구: 9
    홉: 9
    빵: 0
    ０: 0
    １: 1
    ２: 2
    ３: 3
    ４: 4
    ５: 5
    ６: 6
    ７: 7
    ８: 8
    ９: 9
    0: 0
    1: 1
    2: 2
    3: 3
    4: 4
    5: 5
    6: 6
    7: 7
    8: 8
    9: 9
    반: 0.5
FullToHalfMap: !dictionary
  types: [char, char]
  entries:
    ０: '0'
    １: '1'
    ２: '2'
    ３: '3'
    ４: '4'
    ５: '5'
    ６: '6'
    ７: '7'
    ８: '8'
    ９: '9'
    ／: '/'
    －: '-'
    ，: "'"
    Ｇ: G
    Ｍ: M
    Ｔ: T
    Ｋ: K
    ｋ: k
    ．: .
# TratoSimMap: !dictionary
#   types: [char, char]
#   entries:
#     佰: 百
#     點: 点
#     個: 个
#     幾: 几
#     對: 对
#     雙: 双
UnitMap: !dictionary
  types: [string, string]
  entries:
    ' ' : ''
RoundDirectList: !list
  types: [char]
  entries:
    - 빵
    - 열
# TODO: modify below list according to the counterpart in Chinese
TenChars: !list
  types: [char]
  entries:
    - '?'
DigitalNumberRegex: !nestedRegex
  def: ((?<=(\d|\b)){BaseNumbers.MultiplierLookupRegex}(?=\b))
  references: [ BaseNumbers.MultiplierLookupRegex ]
ZeroToNineFullHalfRegex: !simpleRegex
  def: '[\d１２３４５６７８９０]'
DigitNumRegex: !nestedRegex
  def: '{ZeroToNineFullHalfRegex}+|반'
  references: [ZeroToNineFullHalfRegex]
DozenRegex: !simpleRegex
  def: .*타$
PercentageRegex: !simpleRegex
  def: (?<=백\s*분\s*의).+|.+(?=퍼\s*센\s*트)|.*(?=[％%])
DoubleAndRoundRegex: !nestedRegex
  def: '{ZeroToNineFullHalfRegex}+(\.{ZeroToNineFullHalfRegex}+)?\s*[만억]{1,2}(\s*(이상))?'
  references: [ZeroToNineFullHalfRegex]
FracSplitRegex: !simpleRegex
  def: '(와|과|분\s*의|중)'
ZeroToNineIntegerRegex: !simpleRegex
  def: (영|령|공|(?<!생|주|\d)(?<=십|백|천|만|억|조|\s*)일|(?<!(율|답|둘))이(?!다)|두|삼|사(?!(랑|주))|(?<!시)오(?!(월|늘))|육|(?<!며)칠|팔|구|한(?=\s*)|하나|둘|세|셋|넷|다섯|여섯|일곱|여덟|아홉)
TenToNinetySinoIntegerRegex: !nestedRegex
  def: ({ZeroToNineIntegerRegex})?십
  references: [ZeroToNineIntegerRegex]
TenToNinetyNativeIntegerRegex: !simpleRegex
  def: (스무|열|스물|서른|마흔|쉰|예순|일흔|여든|아흔)
ElevenToNineteenSinoIntegerRegex: !nestedRegex
  def: 십({ZeroToNineIntegerRegex})
  references: [ZeroToNineIntegerRegex]
NegativeNumberTermsRegex: !simpleRegex
  def: ((마\s*이\s*너\s*스|음\s*수)\s*)
NegativeNumberTermsRegexNum: !simpleRegex
  def: ((?<!(\d+\s*)|[-－])[-－])
NegativeNumberSignRegex: !nestedRegex
  def: ^{NegativeNumberTermsRegex}|^{NegativeNumberTermsRegexNum}
  references: [NegativeNumberTermsRegex, NegativeNumberTermsRegexNum]
SpeGetNumberRegex: !nestedRegex
  def: '{ZeroToNineFullHalfRegex}|{ZeroToNineIntegerRegex}|[십반]'
  references: [ZeroToNineFullHalfRegex, ZeroToNineIntegerRegex]
PairRegex: .*[쌍짝]$
#IntegerExtractor
RoundNumberIntegerRegex: !simpleRegex
  def: (십|백|천|(?<!(큼|\s일|다스|하|하나))만(?![큼|을])|억|조(?!각)|경|열)
AllowListRegex: !simpleRegex
  def: (。|，|、|（|）|“|”|까지|가지|가치|갓|거리|국|[곳|군데]|개|그루|급|기|길|[까풀|꺼풀]|꼭지|닢|다스|대|돈|롤|리|미터|[밀리|미리]|마리|매|모|[면|페이지]|벌|박|배|부|분|살|술|승|쌈|[옴큼|웅큼]|원|일|잎|잔|장|전|점|제곱|주|종|평|평방|척|채|차|첩|켤레|쾌|탕|푼|[연|년]|월|일|은|\s|$|/|만)
NotSingleRegex: !nestedRegex
  def: ({TenToNinetyNativeIntegerRegex})|((({ZeroToNineIntegerRegex}+|{ZeroToNineFullHalfRegex}+|[십천백셋])\s*(\s*{RoundNumberIntegerRegex}){1,2}(와)?|[십천백셋]|{RoundNumberIntegerRegex}\s*((과\s*)?{ZeroToNineIntegerRegex}|{ZeroToNineFullHalfRegex}|영))((\s*({ZeroToNineIntegerRegex}|{ZeroToNineFullHalfRegex})\s*(\s*{RoundNumberIntegerRegex}){1,2}(와)?|영)\s*)*(\s*{ZeroToNineIntegerRegex})?)
  references: [TenToNinetyNativeIntegerRegex, ZeroToNineIntegerRegex, ZeroToNineFullHalfRegex, RoundNumberIntegerRegex]
SingleRegex: !nestedRegex
  def: (?<!((연필)|(예산)|(사람들)|(년)|(명)))((?<!{ZeroToNineIntegerRegex})(영|령|공|(?<!생)일|두|삼|사(?!(랑|주))|(?<![시])오(?!(월|늘))|육|(?<!며)칠|팔|구|세|한(?=(\s*개))|하나|둘|셋|넷|다섯|여섯|일곱|여덟|아홉)(?={AllowListRegex}))
  references: [ZeroToNineIntegerRegex, AllowListRegex]
NativeSingleRegex: !nestedRegex
  def: (?<!((연필)|(예산)|(사람들)|(년|명|원)))({TenToNinetyNativeIntegerRegex}\s*{ZeroToNineIntegerRegex})
  references: [TenToNinetyNativeIntegerRegex, ZeroToNineIntegerRegex]
NativeIntRegex: !nestedRegex
  def: ((({ZeroToNineIntegerRegex}\s*)?({RoundNumberIntegerRegex}+\s*)?({TenToNinetyNativeIntegerRegex}\s*)?({ZeroToNineIntegerRegex}))|({TenToNinetyNativeIntegerRegex}))
  references: [TenToNinetyNativeIntegerRegex, ZeroToNineIntegerRegex, RoundNumberIntegerRegex]  
AllIntRegex: !nestedRegex
  def: (((({ZeroToNineIntegerRegex}|{ZeroToNineFullHalfRegex}|십)\s*(\s*{RoundNumberIntegerRegex}){1,2}|[십]|{RoundNumberIntegerRegex}\s*({ZeroToNineIntegerRegex}|{ZeroToNineFullHalfRegex}|영))\s*((({ZeroToNineIntegerRegex}|{ZeroToNineFullHalfRegex})\s*(\s*{RoundNumberIntegerRegex}){1,2}|영)\s*)*{ZeroToNineIntegerRegex}?|{ZeroToNineIntegerRegex})|{NativeIntRegex}+)
  references: [ZeroToNineIntegerRegex, ZeroToNineFullHalfRegex, RoundNumberIntegerRegex, NativeIntRegex]
NativeCumKoreanRegex: !nestedRegex
  def: ({ZeroToNineFullHalfRegex}+)\s*(({RoundNumberIntegerRegex}+)({ZeroToNineFullHalfRegex}+))+
  references: [ZeroToNineFullHalfRegex, RoundNumberIntegerRegex]
NumbersWithDozen: !nestedRegex
  def: '(((({ZeroToNineIntegerRegex}|{ZeroToNineFullHalfRegex}|십)\s*(\s*{RoundNumberIntegerRegex}){1,2}|[십]|{RoundNumberIntegerRegex}\s*({ZeroToNineIntegerRegex}|{ZeroToNineFullHalfRegex}|영))\s*((({ZeroToNineIntegerRegex}|{ZeroToNineFullHalfRegex})\s*(\s*{RoundNumberIntegerRegex}){1,2}|영)\s*)*{ZeroToNineIntegerRegex}?|{ZeroToNineIntegerRegex}))?(다스)(?!{AllIntRegex})'
  references: [ZeroToNineIntegerRegex, ZeroToNineFullHalfRegex, RoundNumberIntegerRegex, AllIntRegex]
NumbersSpecialsChars: !nestedRegex
  def: ((({NegativeNumberTermsRegexNum}|{NegativeNumberTermsRegex})\s*)?({ZeroToNineFullHalfRegex}+))(?=\b|\D)(?!(([\.．]{ZeroToNineFullHalfRegex}+)?(k|mil|t|g|b|km|ml|m)))
  references: [NegativeNumberTermsRegexNum, ZeroToNineFullHalfRegex, NegativeNumberTermsRegex]
NumbersSpecialsCharsWithSuffix: !nestedRegex
  def: '({NegativeNumberTermsRegexNum}?{ZeroToNineFullHalfRegex}+(\s*{BaseNumbers.NumberMultiplierRegex}+)?)(?=\b|\D)(?!(([\.．]{ZeroToNineFullHalfRegex}+)?(k|mil|t|g|b|km|ml|m)))'
  references: [NegativeNumberTermsRegexNum, ZeroToNineFullHalfRegex, BaseNumbers.NumberMultiplierRegex]
ZeroToNineIntegerSpecialsChars: !nestedRegex
  def: ((({NegativeNumberTermsRegexNum}|{NegativeNumberTermsRegex})\s*){ZeroToNineIntegerRegex}+)
  references: [NegativeNumberTermsRegexNum, ZeroToNineIntegerRegex, NegativeNumberTermsRegex]
DottedNumbersSpecialsChar: !nestedRegex
  def: '{NegativeNumberTermsRegexNum}?{ZeroToNineFullHalfRegex}{1,3}([,，]{ZeroToNineFullHalfRegex}{3})+'
  references: [NegativeNumberTermsRegexNum, ZeroToNineFullHalfRegex]
PointRegexStr: !simpleRegex
  def: '[점\.．]'
AllFloatRegex: !nestedRegex
  def: '{NegativeNumberTermsRegex}?{AllIntRegex}\s*{PointRegexStr}\s*[일이삼사오육칠팔구영](\s*{ZeroToNineIntegerRegex})*'
  references: [NegativeNumberTermsRegex, AllIntRegex, PointRegexStr, ZeroToNineIntegerRegex]
NumbersWithAllowListRegex: !nestedRegex
  def: ((?<!백\s*분\s*의\s*({AllIntRegex}점*|{AllFloatRegex})*){NegativeNumberTermsRegex}?({RoundNumberIntegerRegex})?(((?<!사)(과\s*))(?!{ZeroToNineFullHalfRegex}))?({NotSingleRegex}|{SingleRegex})(?!({AllIntRegex}*(점{ZeroToNineIntegerRegex}+)*|{AllFloatRegex})*\s*개\s*백\s*분\s*점))+
  references: [AllIntRegex, AllFloatRegex, NegativeNumberTermsRegex, NotSingleRegex, SingleRegex, ZeroToNineIntegerRegex, ZeroToNineFullHalfRegex, RoundNumberIntegerRegex]
NumbersAggressiveRegex: !nestedRegex
  def: (?<!백\s*분\s*의\s*({AllIntRegex}점*|{AllFloatRegex})*){NegativeNumberTermsRegex}?{AllIntRegex}(?!({AllIntRegex}*(점{ZeroToNineIntegerRegex}+)*|{AllFloatRegex})*\s*개\s*백\s*분\s*점)
  references: [AllIntRegex, AllFloatRegex, NegativeNumberTermsRegex, ZeroToNineIntegerRegex]
#DoubleExtractor
PointRegex: !nestedRegex
  def: '{PointRegexStr}'
  references: [PointRegexStr]
DoubleSpecialsChars: !nestedRegex
  def: ((?<!({ZeroToNineFullHalfRegex}+[\.．]{ZeroToNineFullHalfRegex}*))({NegativeNumberTermsRegexNum}\s*)?{ZeroToNineFullHalfRegex}+[\.．]{ZeroToNineFullHalfRegex}+(?!({ZeroToNineFullHalfRegex}*[\.．]{ZeroToNineFullHalfRegex}+)))(?=\b|\D)(?!(k|mil|t|g|b|km|ml|m))
  references: [ZeroToNineFullHalfRegex, NegativeNumberTermsRegexNum]
DoubleRoundNumberSpecialsChars: !nestedRegex
  def: (?<!(({ZeroToNineIntegerRegex}|{RoundNumberIntegerRegex})+[\.．점]({ZeroToNineIntegerRegex}|{RoundNumberIntegerRegex})*))(({NegativeNumberTermsRegexNum}|{NegativeNumberTermsRegex})\s*)?({ZeroToNineIntegerRegex}|{RoundNumberIntegerRegex})+[\.．점]\s?({ZeroToNineIntegerRegex}|{RoundNumberIntegerRegex})+(?!(({ZeroToNineIntegerRegex}|{RoundNumberIntegerRegex})*[\.．점]({ZeroToNineIntegerRegex}|{RoundNumberIntegerRegex})+))
  references: [NegativeNumberTermsRegexNum,NegativeNumberTermsRegex, ZeroToNineIntegerRegex, RoundNumberIntegerRegex]
DoubleSpecialsCharsWithNegatives: !nestedRegex
  def: ((?<!({ZeroToNineFullHalfRegex}+|\.\.|．．))({NegativeNumberTermsRegexNum}\s*)?[\.．]{ZeroToNineFullHalfRegex}+(?!{ZeroToNineFullHalfRegex}*([\.．]{ZeroToNineFullHalfRegex}+)))(?=\b|\D)(?!(k|mil|t|g|b|km|ml|m))
  references: [ZeroToNineFullHalfRegex, NegativeNumberTermsRegexNum]
SimpleDoubleSpecialsChars: !nestedRegex
  def: (({NegativeNumberTermsRegexNum}\s*)?{ZeroToNineFullHalfRegex}{1,3}([,，]{ZeroToNineFullHalfRegex}{3})+[\.．]{ZeroToNineFullHalfRegex}+)
  references: [NegativeNumberTermsRegexNum, ZeroToNineFullHalfRegex]
DoubleWithMultiplierRegex: !nestedRegex
  def: (({NegativeNumberTermsRegexNum}\s*)?{ZeroToNineFullHalfRegex}+[\.．]{ZeroToNineFullHalfRegex}+\s*{BaseNumbers.NumberMultiplierRegex})(?=\b|\D)(?!(k|mil|t|g|b|km|ml|m))
  references: [NegativeNumberTermsRegexNum, ZeroToNineFullHalfRegex, BaseNumbers.NumberMultiplierRegex]
DoubleWithThousandsRegex: !nestedRegex
  def: '{NegativeNumberTermsRegex}?{ZeroToNineFullHalfRegex}+([\.．]{ZeroToNineFullHalfRegex}+)?\s*?[백천만억]{1,2}'
  references: [NegativeNumberTermsRegex, ZeroToNineFullHalfRegex]
DoubleAllFloatRegex: !nestedRegex
  def: (?<!백\s*분\s*의\s*(({AllIntRegex}점*)|{AllFloatRegex})*){AllFloatRegex}(?!{ZeroToNineIntegerRegex}*\s*개\s*백\s*분\s*점)
  references: [AllIntRegex, AllFloatRegex, ZeroToNineIntegerRegex]
DoubleExponentialNotationRegex: !nestedRegex
  def: (?<!{ZeroToNineFullHalfRegex}+[\.．])({NegativeNumberTermsRegexNum}\s*)?{ZeroToNineFullHalfRegex}+([\.．]{ZeroToNineFullHalfRegex}+)?e(([-－+＋]*[1-9１２３４５６７８９]{ZeroToNineFullHalfRegex}*)|[0０](?!{ZeroToNineFullHalfRegex}+))
  references: [ZeroToNineFullHalfRegex, NegativeNumberTermsRegexNum]
DoubleScientificNotationRegex: !nestedRegex
  def: (?<!{ZeroToNineFullHalfRegex}+[\.．])({NegativeNumberTermsRegexNum}\s*)?({ZeroToNineFullHalfRegex}+([\.．]{ZeroToNineFullHalfRegex}+)?)\^([-－+＋]*[1-9１２３４５６７８９]{ZeroToNineFullHalfRegex}*)
  references: [ZeroToNineFullHalfRegex, NegativeNumberTermsRegexNum]
#OrdinalExtractor
OrdinalRegex: !nestedRegex
  def: '((({AllIntRegex}|{RoundNumberIntegerRegex}+)\s*(번째|위))|첫(음|번째)?|처음|일등)|((({ZeroToNineIntegerRegex}|{RoundNumberIntegerRegex})+)(?:일|등|번째))'
  references: [AllIntRegex,RoundNumberIntegerRegex,ZeroToNineIntegerRegex]
RelativeOrdinalRegex: !simpleRegex
  def: (?<relativeOrdinal>((끝(에서)?\s*((세|두)번째)?(바로)?\s*(전의)?(\s*것)?)|뒤에서 세번째|다음(\s*것)?|이전 것|현재|(((마지막)((에)?\s*((서)?\s*(두번째|((바로)?\s*(것|전)))|의 옆))?)|지금)(의 것)?))
OrdinalNumbersRegex: !nestedRegex
  def: '({ZeroToNineFullHalfRegex}+\s*(번째))|({ZeroToNineFullHalfRegex}+(?:일))'
  references: [ZeroToNineFullHalfRegex]
OrdinalKoreanRegex: !nestedRegex
  def: '({OrdinalRegex}|{RelativeOrdinalRegex}|{OrdinalNumbersRegex})'
  references: [OrdinalRegex, RelativeOrdinalRegex, OrdinalNumbersRegex]
#FractionExtractor
AllFractionNumber: !nestedRegex
  def: '(반)|({NegativeNumberTermsRegex}?((({ZeroToNineFullHalfRegex}+|{AllIntRegex}+|{ZeroToNineIntegerRegex}+|{RoundNumberIntegerRegex}+)\s*(와|과)\s*)+)?{NegativeNumberTermsRegex}?({ZeroToNineFullHalfRegex}+|{AllIntRegex}+|{ZeroToNineIntegerRegex}+|{RoundNumberIntegerRegex}+)\s*(분\s*의|중)\s*{NegativeNumberTermsRegex}?({ZeroToNineFullHalfRegex}+|{AllIntRegex}+|{ZeroToNineIntegerRegex}+|{RoundNumberIntegerRegex}+))'
  references: [NegativeNumberTermsRegex, ZeroToNineIntegerRegex, ZeroToNineFullHalfRegex, RoundNumberIntegerRegex, AllIntRegex]
FractionNotationSpecialsCharsRegex: !nestedRegex
  def: (?<!(/|-|\d+))(({NegativeNumberTermsRegexNum}\s*)?{ZeroToNineFullHalfRegex}+\s+{ZeroToNineFullHalfRegex}+[/／]{ZeroToNineFullHalfRegex}+)(?!(/|\d+))
  references: [NegativeNumberTermsRegexNum, ZeroToNineFullHalfRegex]
FractionNotationRegex: !nestedRegex
  def: (?<!(/|-|\d+))(({NegativeNumberTermsRegexNum}\s*)?{ZeroToNineFullHalfRegex}+[/／]{ZeroToNineFullHalfRegex}+)(?!(/|\d+))
  references: [NegativeNumberTermsRegexNum, ZeroToNineFullHalfRegex]
#PercentageExtractor
PercentagePointRegex: !nestedRegex
  def: (?<!{AllIntRegex})({AllFloatRegex}|{AllIntRegex})\s*개\s*백\s*분\s*점
  references: [AllIntRegex, AllFloatRegex]
SimplePercentageRegex: !nestedRegex
  def: (?<!{ZeroToNineIntegerRegex})백\s*분\s*의\s*({AllFloatRegex}|{AllIntRegex}|백)(?!{AllIntRegex})
  references: [ZeroToNineIntegerRegex, AllFloatRegex, AllIntRegex]
NumbersPercentagePointRegex: !nestedRegex
  def: (?<!{ZeroToNineIntegerRegex})백\s*분\s*의\s*{ZeroToNineFullHalfRegex}+[\.．]{ZeroToNineFullHalfRegex}+(?!([\.．]{ZeroToNineFullHalfRegex}+))
  references: [ZeroToNineIntegerRegex, ZeroToNineFullHalfRegex]
NumbersPercentageWithSeparatorRegex: !nestedRegex
  def: (?<!{ZeroToNineIntegerRegex})백\s*분\s*의\s*{ZeroToNineFullHalfRegex}{1,3}([,，]{ZeroToNineFullHalfRegex}{3})+[\.．]{ZeroToNineFullHalfRegex}+
  references: [ZeroToNineIntegerRegex, ZeroToNineFullHalfRegex]
NumbersPercentageWithMultiplierRegex: !nestedRegex
  def: (?<!{ZeroToNineIntegerRegex})백\s*분\s*의\s*{ZeroToNineFullHalfRegex}+[\.．]{ZeroToNineFullHalfRegex}+\s*{BaseNumbers.NumberMultiplierRegex}
  references: [ZeroToNineIntegerRegex, ZeroToNineFullHalfRegex, BaseNumbers.NumberMultiplierRegex]
FractionPercentagePointRegex: !nestedRegex
  def: (?<!({ZeroToNineFullHalfRegex}+[\.．])){ZeroToNineFullHalfRegex}+[\.．]{ZeroToNineFullHalfRegex}+(?!([\.．]{ZeroToNineFullHalfRegex}+))\s*개\s*백\s*분\s*점
  references: [ZeroToNineFullHalfRegex]
FractionPercentageWithSeparatorRegex: !nestedRegex
  def: '{ZeroToNineFullHalfRegex}{1,3}([,，]{ZeroToNineFullHalfRegex}{3})+[\.．]{ZeroToNineFullHalfRegex}+\s*개\s*백\s*분\s*점'
  references: [ZeroToNineFullHalfRegex]
FractionPercentageWithMultiplierRegex: !nestedRegex
  def: '{ZeroToNineFullHalfRegex}+[\.．]{ZeroToNineFullHalfRegex}+\s*{BaseNumbers.NumberMultiplierRegex}\s*개\s*백\s*분\s*점'
  references: [ZeroToNineFullHalfRegex, BaseNumbers.NumberMultiplierRegex]
SimpleNumbersPercentageRegex: !nestedRegex
  def: (?<!{ZeroToNineIntegerRegex})백\s*분\s*의\s*{ZeroToNineFullHalfRegex}+(?!([\.．]{ZeroToNineFullHalfRegex}+))
  references: [ZeroToNineIntegerRegex, ZeroToNineFullHalfRegex]
SimpleNumbersPercentageWithMultiplierRegex: !nestedRegex
  def: (?<!{ZeroToNineIntegerRegex})백\s*분\s*의\s*{ZeroToNineFullHalfRegex}+\s*{BaseNumbers.NumberMultiplierRegex}
  references: [ZeroToNineIntegerRegex, ZeroToNineFullHalfRegex, BaseNumbers.NumberMultiplierRegex]
SimpleNumbersPercentagePointRegex: !nestedRegex
  def: (?!{ZeroToNineIntegerRegex})백\s*분\s*의\s*{ZeroToNineFullHalfRegex}{1,3}([,，]{ZeroToNineFullHalfRegex}{3})+
  references: [ZeroToNineIntegerRegex,ZeroToNineFullHalfRegex]
IntegerPercentageRegex: !nestedRegex
  def: '{ZeroToNineFullHalfRegex}+\s*개\s*백\s*분\s*점'
  references: [ZeroToNineFullHalfRegex]
IntegerPercentageWithMultiplierRegex: !nestedRegex
  def: '{ZeroToNineFullHalfRegex}+\s*{BaseNumbers.NumberMultiplierRegex}\s*개\s*백\s*분\s*점'
  references: [ZeroToNineFullHalfRegex, BaseNumbers.NumberMultiplierRegex]
NumbersFractionPercentageRegex: !nestedRegex
  def: '{ZeroToNineFullHalfRegex}{1,3}([,，]{ZeroToNineFullHalfRegex}{3})+\s*개\s*백\s*분\s*점'
  references: [ZeroToNineFullHalfRegex]
SimpleIntegerPercentageRegex: !nestedRegex
  def: '(?<!%|\d)({NegativeNumberTermsRegexNum}|{NegativeNumberTermsRegex})?({AllIntRegex}|{ZeroToNineFullHalfRegex}|{RoundNumberIntegerRegex})+([\.．]{ZeroToNineFullHalfRegex}+)?(\s*)([％%]|(퍼\s*센\s*트)|(프\s*로)|(퍼\s*센\s*티\s*지))(?!\d)'
  references: [NegativeNumberTermsRegexNum, ZeroToNineFullHalfRegex, AllIntRegex, RoundNumberIntegerRegex, NegativeNumberTermsRegex]
#NumberRangeExtractor
TillRegex: !simpleRegex
  def: (부터|에서|--|-|—|–|——|~)
MoreRegex: !simpleRegex
  def: (초과|많|높|더많|더높|더크|>|넘는|초과이다|크고|(을 초과하는)|크)
LessRegex: !simpleRegex
  def: (미만|적|낮|작|더적|더낮|더적|이하|이하이다|<|아래|작다)
EqualRegex: !simpleRegex
  def: (동일|같|=|(해당하는)|는|그와 같다)
RangePrefixLessRegex: !simpleRegex
  def: (까지최소|(?<!>|=)<|≤)
RangePrefixMoreRegex: !simpleRegex
  def: ((?<!<|=)>|≥)
MoreOrEqual: !nestedRegex
  def: (({MoreRegex}\s*(거나)?\s*{EqualRegex}))
  references: [ MoreRegex, EqualRegex ]
MoreOrEqual2: !nestedRegex
  def: (\s*(거나)?\s*(그보다)\s*{MoreRegex})
  references: [ MoreRegex, EqualRegex ]
MoreOrEqualSuffix: !simpleRegex
  def: \s*(이상)
LessOrEqual: !nestedRegex
  def: (?:(이|보다)?)?\s*(({LessRegex}\s*(거나)?\s*{EqualRegex}(은|다)?))
  references: [ LessRegex, EqualRegex ]
LessOrEqualSuffix: !simpleRegex
  def: \s*(이하|(달하는))
OneNumberRangeMoreSeparateRegex: !simpleRegex
  # TODO: Regex not applicable in Korean, references need to be adjusted
  def: ^[.]
OneNumberRangeLessSeparateRegex: !simpleRegex
  # TODO: Regex not applicable in Korean, references need to be adjusted
  def: ^[.]
OneNumberRangeEqualRegex: !nestedRegex
  def: ((?<number1>((?!((\s(?!\d+))|(,(?!\d+))|。)).)+)\s*(과|에)+\s*{EqualRegex})(거나|다|개)?(\s*({LessRegex})(은)?)?|((?<number1>((?!((\s(?!\d+))|(,(?!\d+))|。)).)+)\s*(년에)\s*(\d+)(은|이다))
  references: [EqualRegex,LessRegex]
OneNumberRangeEqualRegex2: !nestedRegex
  def: ((?<number1>(((?!((\s(?!\d+))|(,(?!\d+))|。)))(?<=((는\s+))))([\d]|{AllIntRegex})+)(이다))
  references: [AllIntRegex]
OneNumberRangeMoreRegex1: !nestedRegex
  def: ((?<number1>((?!(((?!\d+))|((,)(?!\d+))|。)).)+)\s*(이|보다|거나|또는)+\s*(그|그보다)?\s*({MoreOrEqual}|{MoreRegex}|{MoreOrEqualSuffix})(은|다)?)
  references: [MoreOrEqual, MoreRegex, MoreOrEqualSuffix]
OneNumberRangeMoreRegex2: !nestedRegex
  def: (?<number1>(((?!(((?!([십백천만억조경열]|(영|령|공|일|이(?!다)|두|삼|사|오|육|(?<!며)칠|팔|구))+))))|(사분의\s)).)+)(보다)?\s({MoreRegex})|(?<number1>((?!((、(?!\d+))|(、(?!\d+))|。))|(?!\s+).)+)\s*(((혹은\s*그)?){MoreRegex}|((혹은\s*그)?){MoreOrEqualSuffix})
  references: [MoreRegex, MoreOrEqualSuffix]
OneNumberRangeMoreRegex3: !nestedRegex
  def: ({RangePrefixMoreRegex})\s*(?<number1>(((?!(((?!\d+))|((,)(?!\d+))|。)).)+))
  references: [RangePrefixMoreRegex]
OneNumberRangeMoreRegex4: !nestedRegex
  def: ((?<number1>((?!((\s(?!\d+))|(,(?!\d+))|。)).)+)\s*(과|에)+\s*{EqualRegex}){MoreOrEqual2}(다)?
  references: [MoreOrEqual2,EqualRegex]
OneNumberRangeMoreRegex5: !nestedRegex
  def: (?<number1>((?![,.](?!\d+)).)+)\s*((또는)\s+(그){MoreOrEqualSuffix})
  references: [MoreOrEqualSuffix]
OneNumberRangeMoreRegexFraction: !nestedRegex
  def: ((?<number1>(((\d+)[/／]).)+)(이)\s*{MoreRegex})
  references: [MoreRegex]
OneNumberRangeLessRegex1: !nestedRegex
  def: ((?<number2>((?!(((?!\d+))|((,)(?!\d+))|。)).)+)\s*({LessOrEqual}|{LessRegex}))|((?<number2>((?!(((?!\d+))|((,)(?!\d+))|。)).)+)\s*(이|보다|거나|또는)+\s*(그|그보다)?\s*{LessRegex}(은|다)?)|{OneNumberRangeLessRegex5}
  references: [LessOrEqual, LessRegex,OneNumberRangeLessRegex5]
OneNumberRangeLessRegex2: !nestedRegex
  def: ((?<number2>((?!((\s(?!\d+))|(,(?!\d+))|。)).)+)\s*(과|에|이)+\s*{EqualRegex}?)(거나)\s*(최소)\s*(\d+)
  references: [EqualRegex]
OneNumberRangeLessRegex3: !nestedRegex
  def: (?:({RangePrefixLessRegex}))\s*(?<number2>(((?!((\s(?!\d+))|((,)(?!\d+))|。)).)+))
  references: [RangePrefixLessRegex]
OneNumberRangeLessRegex4: !nestedRegex
  def: (?<number2>(((?!((\s(?!\d+))|((,)(?!\d+))|。)).)+))\s*(에)(?:({LessOrEqualSuffix}))
  references: [LessOrEqualSuffix]
OneNumberRangeLessRegex5: !simpleRegex
  def: ((?<number2>((이분의\s)|[영령공일이두삼사오육칠팔구]+|[십백천만억조경열]+)+)\s*(또는)?\s*(그|그보다|보다)?\s*(미만|적게|밑|이하|작다))
TwoNumberRangeRegex1: !nestedRegex
  def: (?<number1>((?!((，(?!\d+))|(,(?!\d+))|。)).)+)(위?)\s*(과|와|{TillRegex})\s*(?<number2>((?!((，(?!\d+))|(,(?!\d+))|。)).)+)(위?)\s*(사이)
  references: [TillRegex]
TwoNumberRangeRegex2: !nestedRegex
  def: (({OneNumberRangeMoreRegex1}|{OneNumberRangeMoreRegex2})\s*(과|또는|，|、|,)?\s*({OneNumberRangeLessRegex1}))|({OneNumberRangeLessRegex1}|{OneNumberRangeMoreRegex2})
  references: [ OneNumberRangeMoreRegex1, OneNumberRangeMoreRegex2, OneNumberRangeLessRegex1]
TwoNumberRangeRegex3: !nestedRegex
  def: ({OneNumberRangeLessRegex1})\s*(과|또는|，|、|,)?\s*({OneNumberRangeMoreRegex1}|{OneNumberRangeMoreRegex2})
  references: [ OneNumberRangeMoreRegex1, OneNumberRangeMoreRegex2, OneNumberRangeLessRegex1]
TwoNumberRangeRegex4: !nestedRegex
  def: (?<number1>((?!((，(?!\d+))|(,(?!\d+))|。)).)+)\s*{TillRegex}\s*(?<number2>((?!((，(?!\d+))|(,(?!\d+))|。)).)+)(까지)?
  references: [TillRegex]
TwoNumberRangeRegex5: !nestedRegex
  def: (?<number1>([십백천만억조경열]|(영|령|공|일|이(?!다)|두|삼|사|오|육|(?<!며)칠|팔|구))+)\s*{TillRegex}\s*(?<number2>([십백천만억조경열]|(영|령|공|일|이(?!다)|두|삼|사|오|육|칠|팔|구))+)\s*([십백천만억조경열]|((미만|적|낮|작|더적|더낮|더적|이하이다|까지|아래))+)
  references: [TillRegex]
TwoNumberRangeRegex6: !nestedRegex
  def: ((?<number1>((?!((，(?!\d+))|(,(?!\d+))|。|\D)).)+)\s*{TillRegex}+\s*(?<number2>((?!((，(?!\d+))|(,(?!\d+))|。)).)+)\s*(까지))
  references: [TillRegex]
TwoNumberRangeRegex7: !nestedRegex
  def: ({OneNumberRangeMoreRegex2}\s*{OneNumberRangeLessRegex5})
  references: [OneNumberRangeMoreRegex2, OneNumberRangeLessRegex5]
InexactNumberUnitRegex: !simpleRegex
  def: (몇|며|여러)
RelativeReferenceOffsetMap: !dictionary
  types: [ string, string ]
  entries:
    마지막: 0
    다음: 1
    뒤에서 세번째: -2
    마지막에서 두번째: -1
    마지막의 옆: -1
    마지막에서 바로 전의 것: -1
    이전 것: -1
    다음 것: 1
    마지막에서 바로 전: -1
    지금의 것: 0
    현재: 0
    끝: 0
    끝에서 세번째: -2
    끝에서 두번째: -1
    끝에서 바로 전의 것: -1
RelativeReferenceRelativeToMap: !dictionary
  types: [ string, string ]
  entries:
    마지막: end
    다음: current
    뒤에서 세번째: end
    마지막에서 두번째: end
    마지막의 옆: end
    마지막에서 바로 전의 것: end
    이전 것: current
    다음 것: current
    마지막에서 바로 전: end
    지금의 것: current
    현재: current
    끝: end
    끝에서 세번째: end
    끝에서 두번째: end
    끝에서 바로 전의 것: end
...