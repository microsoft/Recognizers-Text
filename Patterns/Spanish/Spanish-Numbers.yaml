---
#ISO 639-2 Code
LangMarker: Spa
#Does this language use non-whitespace-separated numbers?
CompoundNumberLanguage: !bool false
#Does this culture uses period and comma intercheangeably as decimal separator?
MultiDecimalSeparatorCulture: !bool true
#List of culture variants that don't follow the default decimal separator
NonStandardSeparatorVariants: !list
  types: [ string ]
  entries:
    - es-mx
    - es-do
    - es-sv
    - es-gt
    - es-hn
    - es-ni
    - es-pa
    - es-pr 
#Integer Regex
HundredsNumberIntegerRegex: !simpleRegex
  def: (cuatrocient[ao]s|trescient[ao]s|seiscient[ao]s|setecient[ao]s|ochocient[ao]s|novecient[ao]s|doscient[ao]s|quinient[ao]s|(?<!por\s+)(cien(to)?))
RoundNumberIntegerRegex: !simpleRegex
  def: (mil millones|mill[oó]n(es)?|mil|bill[oó]n(es)?|trill[oó]n(es)?|cuatrill[oó]n(es)?|quintill[oó]n(es)?|sextill[oó]n(es)?|septill[oó]n(es)?)
ZeroToNineIntegerRegex: !simpleRegex
  def: (cuatro|cinco|siete|nueve|cero|tres|seis|ocho|dos|un[ao]?)
TenToNineteenIntegerRegex: !simpleRegex
  def: (diecisiete|diecinueve|diecis[eé]is|dieciocho|catorce|quince|trece|diez|once|doce)
TwentiesIntegerRegex: !simpleRegex
  def: (veinti(cuatro|cinco|siete|nueve|tr[eé]s|s[eé]is|ocho|d[oó]s|[uú]n[oa]?)|ventiun[ao]|veinte)
TensNumberIntegerRegex: !simpleRegex
  def: (cincuenta|cuarenta|treinta|se[st]enta|ochenta|noventa)
NegativeNumberTermsRegex: !simpleRegex
  def: (?<negTerm>(?<!(al|lo)\s+)menos\s+)
NegativeNumberSignRegex: !nestedRegex
  def: ^{NegativeNumberTermsRegex}.*
  references: [ NegativeNumberTermsRegex ]
DigitsNumberRegex: !simpleRegex
  def: \d|\d{1,3}(\.\d{3})
BelowHundredsRegex: !nestedRegex
  def: (({TenToNineteenIntegerRegex}|{TwentiesIntegerRegex}|({TensNumberIntegerRegex}(\s+y\s+{ZeroToNineIntegerRegex})?))|{ZeroToNineIntegerRegex})
  references: [ TenToNineteenIntegerRegex, TwentiesIntegerRegex, TensNumberIntegerRegex, ZeroToNineIntegerRegex ]
BelowThousandsRegex: !nestedRegex
  def: ({HundredsNumberIntegerRegex}(\s+{BelowHundredsRegex})?|{BelowHundredsRegex})
  references: [ HundredsNumberIntegerRegex, BelowHundredsRegex ]
SupportThousandsRegex: !nestedRegex
  def: (({BelowThousandsRegex}|{BelowHundredsRegex})\s+{RoundNumberIntegerRegex}(\s+{RoundNumberIntegerRegex})?)
  references: [ BelowThousandsRegex, BelowHundredsRegex, RoundNumberIntegerRegex ]
SeparaIntRegex: !nestedRegex
  def: ({SupportThousandsRegex}(\s+{SupportThousandsRegex})*(\s+{BelowThousandsRegex})?|{BelowThousandsRegex})
  references: [ SupportThousandsRegex, BelowThousandsRegex ]
AllIntRegex: !nestedRegex
  def: ({SeparaIntRegex}|mil(\s+{BelowThousandsRegex})?)
  references: [ SeparaIntRegex, BelowThousandsRegex ]
PlaceHolderPureNumber: !simpleRegex
  def: \b
PlaceHolderDefault: !simpleRegex
  def: \D|\b
NumbersWithPlaceHolder: !paramsRegex
  def: (((?<!\d+\s*)-\s*)|(?<=\b))\d+(?!([\.,]\d+[a-zA-Z]))(?={placeholder})
  params: [ placeholder ]
NumbersWithSuffix: !nestedRegex
  def: (((?<=\W|^)-\s*)|(?<=\b))\d+\s*{BaseNumbers.NumberMultiplierRegex}(?=\b)
  references: [ BaseNumbers.NumberMultiplierRegex ]
RoundNumberIntegerRegexWithLocks: !nestedRegex
  def: (?<=\b)({DigitsNumberRegex})+\s+{RoundNumberIntegerRegex}(?=\b)
  references: [ DigitsNumberRegex, RoundNumberIntegerRegex ]
NumbersWithDozenSuffix: !simpleRegex
  def: (((?<=\W|^)-\s*)|(?<=\b))\d+\s+docenas?(?=\b)
AllIntRegexWithLocks: !nestedRegex
  def: ((?<=\b){AllIntRegex}(?=\b))
  references: [ AllIntRegex ]
AllIntRegexWithDozenSuffixLocks: !nestedRegex
  def: (?<=\b)(((media\s+)?\s+docena)|({AllIntRegex}\s+(y|con)\s+)?({AllIntRegex}\s+docenas?))(?=\b)
  references: [ AllIntRegex ]
#Ordinal Regex
SimpleRoundOrdinalRegex: !simpleRegex
  def: (mil[eé]simo|millon[eé]sim[oa]|billon[eé]sim[oa]|trillon[eé]sim[oa]|cuatrillon[eé]sim[oa]|quintillon[eé]sim[oa]|sextillon[eé]sim[oa]|septillon[eé]sim[oa])
OneToNineOrdinalRegex: !simpleRegex
  def: (primer[oa]?|segund[oa]|tercer[oa]?|cuart[oa]|quint[oa]|sext[oa]|s[eé]ptim[oa]|octav[oa]|noven[oa])
TensOrdinalRegex: !simpleRegex
  def: (nonag[eé]sim[oa]|octog[eé]sim[oa]|septuag[eé]sim[oa]|sexag[eé]sim[oa]|quincuag[eé]sim[oa]|cuadrag[eé]sim[oa]|trig[eé]sim[oa]|vig[eé]sim[oa]|d[eé]cim[oa])
HundredOrdinalRegex: !simpleRegex
  def: (cent[eé]sim[oa]|ducent[eé]sim[oa]|tricent[eé]sim[oa]|cuadringent[eé]sim[oa]|quingent[eé]sim[oa]|sexcent[eé]sim[oa]|septingent[eé]sim[oa]|octingent[eé]sim[oa]|noningent[eé]sim[oa])
SpecialUnderHundredOrdinalRegex: !simpleRegex
  def: (und[eé]cim[oa]|duod[eé]cim[oa]|decimoctav[oa])
UnderHundredOrdinalRegex: !nestedRegex
  def: ({SpecialUnderHundredOrdinalRegex}|(({TensOrdinalRegex}(\s)?)?{OneToNineOrdinalRegex})|{TensOrdinalRegex})
  references: [ TensOrdinalRegex, OneToNineOrdinalRegex, SpecialUnderHundredOrdinalRegex ]
UnderThousandOrdinalRegex: !nestedRegex
  def: ((({HundredOrdinalRegex}(\s)?)?{UnderHundredOrdinalRegex})|{HundredOrdinalRegex})
  references: [ HundredOrdinalRegex, UnderHundredOrdinalRegex ]
OverThousandOrdinalRegex: !nestedRegex
  def: (({AllIntRegex})([eé]sim[oa]))
  references: [ AllIntRegex ]
ComplexOrdinalRegex: !nestedRegex
  def: (({OverThousandOrdinalRegex}(\s)?)?{UnderThousandOrdinalRegex}|{OverThousandOrdinalRegex})
  references: [ OverThousandOrdinalRegex, UnderThousandOrdinalRegex ]
SufixRoundOrdinalRegex: !nestedRegex
  def: (({AllIntRegex})({SimpleRoundOrdinalRegex}))
  references: [ AllIntRegex, SimpleRoundOrdinalRegex ]
ComplexRoundOrdinalRegex: !nestedRegex
  def: ((({SufixRoundOrdinalRegex}(\s)?)?{ComplexOrdinalRegex})|{SufixRoundOrdinalRegex})
  references: [ SufixRoundOrdinalRegex, ComplexOrdinalRegex ]
AllOrdinalRegex: !nestedRegex
  def: '{ComplexOrdinalRegex}|{SimpleRoundOrdinalRegex}|{ComplexRoundOrdinalRegex}'
  references: [ ComplexOrdinalRegex, SimpleRoundOrdinalRegex, ComplexRoundOrdinalRegex ]
OrdinalSuffixRegex: !simpleRegex
  def: (?<=\b)(\d*((1(er|r[oa])|2d[oa]|3r[oa]|4t[oa]|5t[oa]|6t[oa]|7m[oa]|8v[oa]|9n[oa]|0m[oa]|11[vm][oa]|12[vm][oa])|\d\.?[ºª]))(?=\b)
OrdinalNounRegex: !nestedRegex
  def: (?<=\b){AllOrdinalRegex}(?=\b)
  references: [ AllOrdinalRegex ]
#Fraction Regex
SpecialFractionInteger: !nestedRegex
  def: ((({AllIntRegex})i?({ZeroToNineIntegerRegex})|({AllIntRegex}))a?v[oa]s?)
  references: [ AllIntRegex, ZeroToNineIntegerRegex ]
FractionNotationRegex: !nestedRegex
  def: '{BaseNumbers.FractionNotationRegex}'
  references: [ BaseNumbers.FractionNotationRegex ]
FractionNotationWithSpacesRegex: !simpleRegex
  def: (((?<=\W|^)-\s*)|(?<=\b))\d+\s+\d+[/]\d+(?=(\b[^/]|$))
FractionNounRegex: !nestedRegex
  def: (?<=\b)({AllIntRegex}\s+((y|con)\s+)?)?({AllIntRegex})(\s+((y|con)\s)?)((({AllOrdinalRegex})s?|({SpecialFractionInteger})|({SufixRoundOrdinalRegex})s?)|medi[oa]s?|tercios?)(?=\b)
  references: [ AllIntRegex, AllOrdinalRegex, SpecialFractionInteger, SufixRoundOrdinalRegex ]
FractionNounWithArticleRegex: !nestedRegex
  def: (?<=\b)({AllIntRegex}\s+(y\s+)?)?(un|un[oa])(\s+)(({AllOrdinalRegex})|({SufixRoundOrdinalRegex})|(y\s+)?medi[oa]s?)(?=\b)
  references: [ AllIntRegex, AllOrdinalRegex, SufixRoundOrdinalRegex ]
FractionPrepositionRegex: !nestedRegex
  def: (?<!{BaseNumbers.CommonCurrencySymbol}\s*)(?<=\b)(?<numerator>({AllIntRegex})|((?<!\.)\d+))\s+sobre\s+(?<denominator>({AllIntRegex})|((\d+)(?!\.)))(?=\b)
  references: [ AllIntRegex, BaseNumbers.CommonCurrencySymbol ]
#Double Regex
AllPointRegex: !nestedRegex
  def: ((\s+{ZeroToNineIntegerRegex})+|(\s+{AllIntRegex}))
  references: [ ZeroToNineIntegerRegex, AllIntRegex ]
AllFloatRegex: !nestedRegex
  def: '{AllIntRegex}(\s+(coma|con)){AllPointRegex}'
  references: [ AllIntRegex, AllPointRegex ]
DoubleDecimalPointRegex: !paramsRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+[\.,])))\d+[\.,]\d+(?!([\.,]\d+))(?={placeholder})
  params: [ placeholder ]
DoubleWithoutIntegralRegex: !paramsRegex
  def: (?<=\s|^)(?<!(\d+))[\.,]\d+(?!([\.,]\d+))(?={placeholder})
  params: [ placeholder ]
DoubleWithMultiplierRegex: !nestedRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+\[\.,])))\d+[\.,]\d+\s*{BaseNumbers.NumberMultiplierRegex}(?=\b)
  references: [ BaseNumbers.NumberMultiplierRegex ]
DoubleWithRoundNumber: !nestedRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+\[\.,])))\d+[\.,]\d+\s+{RoundNumberIntegerRegex}(?=\b)
  references: [ RoundNumberIntegerRegex ]
DoubleAllFloatRegex: !nestedRegex
  def: ((?<=\b){AllFloatRegex}(?=\b))
  references: [ AllFloatRegex ]
DoubleExponentialNotationRegex: !simpleRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+[\.,])))(\d+([\.,]\d+)?)e([+-]*[1-9]\d*)(?=\b)
DoubleCaretExponentialNotationRegex: !simpleRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+[\.,])))(\d+([\.,]\d+)?)\^([+-]*[1-9]\d*)(?=\b)
#Percentage Regex
NumberWithPrefixPercentage: !nestedRegex
  def: (?<!%)({BaseNumbers.NumberReplaceToken})(\s*)(%(?!{BaseNumbers.NumberReplaceToken})|por\s+cien(to)?\b)
  references: [ BaseNumbers.NumberReplaceToken ]
#NumberRange Regex
TillRegex: !simpleRegex
  def: (\ba\b|hasta|--|-|—|——|~|–)
MoreRegex: !simpleRegex
  def: (más\s+(alt[oa]s?|grandes)\s+que|(m[áa]s|mayor(es)?|superior(es)?|por\s+encima)\b((\s+(que|del?|al?))|(?=\s+o\b))|(?<!<|=)>)
LessRegex: !simpleRegex
  def: ((meno(s|r(es)?)|inferior(es)?|por\s+debajo)((\s+(que|del?|al?)|(?=\s+o\b)))|más\s+baj[oa]\s+que|(?<!>|=)<)
EqualRegex: !simpleRegex
  def: ((igual(es)?|equivalente(s)?|equivalen?)(\s+(al?|que|del?))?|(?<!<|>)=)
MoreOrEqualPrefix: !nestedRegex
  def: ((no\s+{LessRegex})|(por\s+lo\s+menos|como\s+m[íi]nimo|al\s+menos))
  references: [ LessRegex ]
MoreOrEqual: !nestedRegex
  def: (({MoreRegex}\s+(o)?\s+{EqualRegex})|({EqualRegex}\s+(o|y)\s+{MoreRegex})|{MoreOrEqualPrefix}(\s+(o)\s+{EqualRegex})?|({EqualRegex}\s+(o)\s+)?{MoreOrEqualPrefix}|>\s*=)
  references: [ MoreRegex, EqualRegex, LessRegex, MoreOrEqualPrefix ]
MoreOrEqualSuffix: !simpleRegex
  def: ((\b(y|o)\b\s+(m[áa]s|mayor(es)?|superior(es)?)((?!\s+(alt[oa]|baj[oa]|que|del?|al?))|(\s+(que|del?|al?)(?!(\s*\d+)))))|como\s+m[íi]nimo|por\s+lo\s+menos|al\s+menos)\b
LessOrEqualPrefix: !nestedRegex
  def: ((no\s+{MoreRegex})|(como\s+(m[aá]ximo|mucho)))
  references: [ MoreRegex ]
LessOrEqual: !nestedRegex
  def: (({LessRegex}\s+(o)?\s+{EqualRegex})|({EqualRegex}\s+(o)?\s+{LessRegex})|{LessOrEqualPrefix}(\s+(o)?\s+{EqualRegex})?|({EqualRegex}\s+(o)?\s+)?{LessOrEqualPrefix}|<\s*=)
  references: [ LessRegex, EqualRegex, MoreRegex, LessOrEqualPrefix ]
LessOrEqualSuffix: !simpleRegex
  def: ((\b(y|o)\b\s+(meno(s|r(es)?|inferior(es)?))((?!\s+(alt[oa]|baj[oa]|que|del?|al?))|(\s+(que|del?|al?)(?!(\s*\d+)))))|como\s+m[áa]ximo)\b
NumberSplitMark: !nestedRegex
  def: (?![,.](?!\d+))(?!\s*\b(((y|e)\s+)?({LessRegex}|{MoreRegex}|{EqualRegex}|no|de)|pero|o|a)\b)
  references: [ LessRegex, MoreRegex, EqualRegex ]
MoreRegexNoNumberSucceed: !simpleRegex
  def: (\b(m[áa]s|mayor(es)?|superior(es)?)((?!\s+(que|del?|al?))|\s+((que|del?)(?!(\s*\d+))))|(por encima)(?!(\s*\d+)))\b
LessRegexNoNumberSucceed: !simpleRegex
  def: (\b(meno(s|r(es)?)|inferior(es)?)((?!\s+(que|del?|al?))|\s+((que|del?|al?)(?!(\s*\d+))))|(por debajo)(?!(\s*\d+)))\b
EqualRegexNoNumberSucceed: !simpleRegex
  def: (\b(igual(es)?|equivalentes?|equivalen?)((?!\s+(al?|que|del?))|(\s+(al?|que|del?)(?!(\s*\d+)))))\b
OneNumberRangeMoreRegex1: !nestedRegex
  def: ({MoreOrEqual}|{MoreRegex})\s*((el|las?|los)\s+)?(?<number1>({NumberSplitMark}.)+)
  references: [ MoreOrEqual, MoreRegex, NumberSplitMark ]
OneNumberRangeMoreRegex1LB: !nestedRegex
  def: (?<!no\s+){OneNumberRangeMoreRegex1}
  references: [ OneNumberRangeMoreRegex1 ]
OneNumberRangeMoreRegex2: !nestedRegex
  def: (?<number1>({NumberSplitMark}.)+)\s*{MoreOrEqualSuffix}
  references: [ MoreOrEqualSuffix, NumberSplitMark ]
OneNumberRangeMoreSeparateRegex: !nestedRegex
  def: ({EqualRegex}\s+(?<number1>({NumberSplitMark}.)+)(\s+o\s+){MoreRegexNoNumberSucceed})|({MoreRegex}\s+(?<number1>({NumberSplitMark}.)+)(\s+o\s+){EqualRegexNoNumberSucceed})
  references: [ EqualRegex, MoreRegex, EqualRegexNoNumberSucceed, MoreRegexNoNumberSucceed, NumberSplitMark ]
OneNumberRangeLessRegex1: !nestedRegex
  def: ({LessOrEqual}|{LessRegex})\s*((el|las?|los)\s+)?(?<number2>({NumberSplitMark}.)+)
  references: [ LessOrEqual, LessRegex, NumberSplitMark ]
OneNumberRangeLessRegex1LB: !nestedRegex
  def: (?<!no\s+){OneNumberRangeLessRegex1}
  references: [ OneNumberRangeLessRegex1 ]
OneNumberRangeLessRegex2: !nestedRegex
  def: (?<number2>({NumberSplitMark}.)+)\s*{LessOrEqualSuffix}
  references: [ LessOrEqualSuffix, NumberSplitMark ]
OneNumberRangeLessSeparateRegex: !nestedRegex
  def: ({EqualRegex}\s+(?<number1>({NumberSplitMark}.)+)(\s+o\s+){LessRegexNoNumberSucceed})|({LessRegex}\s+(?<number1>({NumberSplitMark}.)+)(\s+o\s+){EqualRegexNoNumberSucceed})
  references: [ EqualRegex, LessRegex, EqualRegexNoNumberSucceed, LessRegexNoNumberSucceed, NumberSplitMark ]
OneNumberRangeEqualRegex: !nestedRegex
  def: '{EqualRegex}\s*((el|las?|los)\s+)?(?<number1>({NumberSplitMark}.)+)'
  references: [ EqualRegex, NumberSplitMark ]
TwoNumberRangeRegex1: !nestedRegex
  def: \bentre\s*((el|las?|los)\s+)?(?<number1>({NumberSplitMark}.)+)\s*y\s*((el|las?|los)\s+)?(?<number2>({NumberSplitMark}.)+)
  references: [ NumberSplitMark ]
TwoNumberRangeRegex2: !nestedRegex
  def: ({OneNumberRangeMoreRegex1}|{OneNumberRangeMoreRegex2})\s*(\by\b|\be\b|pero|,)\s*({OneNumberRangeLessRegex1}|{OneNumberRangeLessRegex2})
  references: [ OneNumberRangeMoreRegex1, OneNumberRangeMoreRegex2, OneNumberRangeLessRegex1, OneNumberRangeLessRegex2 ]
TwoNumberRangeRegex3: !nestedRegex
  def: ({OneNumberRangeLessRegex1}|{OneNumberRangeLessRegex2})\s*(\by\b|\be\b|pero|,)\s*({OneNumberRangeMoreRegex1}|{OneNumberRangeMoreRegex2})
  references: [ OneNumberRangeMoreRegex1, OneNumberRangeMoreRegex2, OneNumberRangeLessRegex1, OneNumberRangeLessRegex2 ]
TwoNumberRangeRegex4: !nestedRegex
  def: (\bde(sde)?\s+)?(\b(el|las?|los)\s+)?\b(?!\s+)(?<number1>({NumberSplitMark}(?!\b(entre|de(sde)?|es)\b).)+)\b\s*{TillRegex}\s*((el|las?|los)\s+)?\b(?!\s+)(?<number2>({NumberSplitMark}.)+)\b
  references: [ TillRegex, NumberSplitMark ]
AmbiguousFractionConnectorsRegex: !simpleRegex
  def: (\b(en|de)\b)
#Parser
DecimalSeparatorChar: !char ','
FractionMarkerToken: sobre
NonDecimalSeparatorChar: !char '.'
HalfADozenText: seis
WordSeparatorToken: y
WrittenDecimalSeparatorTexts: [coma, con]
WrittenGroupSeparatorTexts: [punto]
WrittenIntegerSeparatorTexts: [y]
WrittenFractionSeparatorTexts: [con]
HalfADozenRegex: !simpleRegex
  def: media\s+docena
DigitalNumberRegex: !nestedRegex
  def: ((?<=\b)(mil(l[oó]n(es)?)?|bill[oó]n(es)?|trill[oó]n(es)?|docenas?)(?=\b))|((?<=(\d|\b)){BaseNumbers.MultiplierLookupRegex}(?=\b))
  references: [ BaseNumbers.MultiplierLookupRegex ]
CardinalNumberMap: !dictionary
  types: [ string, long ]
  entries:
    cero: 0
    un: 1
    una: 1
    uno: 1
    dos: 2
    tres: 3
    cuatro: 4
    cinco: 5
    seis: 6
    siete: 7
    ocho: 8
    nueve: 9
    diez: 10
    once: 11
    doce: 12
    docena: 12
    docenas: 12
    trece: 13
    catorce: 14
    quince: 15
    dieciseis: 16
    dieciséis: 16
    diecisiete: 17
    dieciocho: 18
    diecinueve: 19
    veinte: 20
    ventiuna: 21 
    ventiuno: 21 
    veintiun: 21 
    veintiún: 21 
    veintiuno: 21 
    veintiuna: 21 
    veintidos: 22 
    veintidós: 22 
    veintitres: 23 
    veintitrés: 23 
    veinticuatro: 24 
    veinticinco: 25 
    veintiseis: 26 
    veintiséis: 26 
    veintisiete: 27 
    veintiocho: 28 
    veintinueve: 29 
    treinta: 30
    cuarenta: 40
    cincuenta: 50
    sesenta: 60
    setenta: 70
    ochenta: 80
    noventa: 90
    cien: 100
    ciento: 100
    doscientas: 200
    doscientos: 200
    trescientas: 300
    trescientos: 300
    cuatrocientas: 400
    cuatrocientos: 400
    quinientas: 500
    quinientos: 500
    seiscientas: 600
    seiscientos: 600
    setecientas: 700
    setecientos: 700
    ochocientas: 800
    ochocientos: 800
    novecientas: 900
    novecientos: 900
    mil: 1000
    millon: 1000000
    millón: 1000000
    millones: 1000000
    billon: 1000000000000
    billón: 1000000000000
    billones: 1000000000000
    trillon: 1000000000000000000
    trillón: 1000000000000000000
    trillones: 1000000000000000000
OrdinalNumberMap: !dictionary
  types: [ string, long ]
  entries:
    primero: 1
    primera: 1
    primer: 1
    segundo: 2
    segunda: 2
    medio: 2
    media: 2
    tercero: 3
    tercera: 3
    tercer: 3
    tercio: 3
    cuarto: 4
    cuarta: 4
    quinto: 5
    quinta: 5
    sexto: 6
    sexta: 6
    septimo: 7
    septima: 7
    séptimo: 7
    séptima: 7
    octavo: 8
    octava: 8
    noveno: 9
    novena: 9
    decimo: 10
    décimo: 10
    decima: 10
    décima: 10
    undecimo: 11
    undecima: 11
    undécimo: 11
    undécima: 11
    duodecimo: 12
    duodecima: 12
    duodécimo: 12
    duodécima: 12
    decimotercero: 13
    decimotercera: 13
    decimocuarto: 14
    decimocuarta: 14
    decimoquinto: 15
    decimoquinta: 15
    decimosexto: 16
    decimosexta: 16
    decimoseptimo: 17
    decimoseptima: 17
    decimoctavo: 18
    decimoctava: 18
    decimonoveno: 19
    decimonovena: 19
    vigesimo: 20
    vigesima: 20
    vigésimo: 20
    vigésima: 20
    trigesimo: 30
    trigesima: 30
    trigésimo: 30
    trigésima: 30
    cuadragesimo: 40
    cuadragesima: 40
    cuadragésimo: 40
    cuadragésima: 40
    quincuagesimo: 50
    quincuagesima: 50
    quincuagésimo: 50
    quincuagésima: 50
    sexagesimo: 60
    sexagesima: 60
    sexagésimo: 60
    sexagésima: 60
    septuagesimo: 70
    septuagesima: 70
    septuagésimo: 70
    septuagésima: 70
    octogesimo: 80
    octogesima: 80
    octogésimo: 80
    octogésima: 80
    nonagesimo: 90
    nonagesima: 90
    nonagésimo: 90
    nonagésima: 90
    centesimo: 100
    centesima: 100
    centésimo: 100
    centésima: 100
    ducentesimo: 200
    ducentesima: 200
    ducentésimo: 200
    ducentésima: 200
    tricentesimo: 300
    tricentesima: 300
    tricentésimo: 300
    tricentésima: 300
    cuadringentesimo: 400
    cuadringentesima: 400
    cuadringentésimo: 400
    cuadringentésima: 400
    quingentesimo: 500
    quingentesima: 500
    quingentésimo: 500
    quingentésima: 500
    sexcentesimo: 600
    sexcentesima: 600
    sexcentésimo: 600
    sexcentésima: 600
    septingentesimo: 700
    septingentesima: 700
    septingentésimo: 700
    septingentésima: 700
    octingentesimo: 800
    octingentesima: 800
    octingentésimo: 800
    octingentésima: 800
    noningentesimo: 900
    noningentesima: 900
    noningentésimo: 900
    noningentésima: 900
    milesimo: 1000
    milesima: 1000
    milésimo: 1000
    milésima: 1000
    millonesimo: 1000000
    millonesima: 1000000
    millonésimo: 1000000
    millonésima: 1000000
    billonesimo: 1000000000000
    billonesima: 1000000000000
    billonésimo: 1000000000000
    billonésima: 1000000000000
PrefixCardinalMap: !dictionary
  types: [ string, long ]
  entries:
    dos: 2 
    tres: 3 
    cuatro: 4 
    cinco: 5 
    seis: 6 
    siete: 7 
    ocho: 8 
    nueve: 9 
    diez: 10 
    once: 11 
    doce: 12 
    trece: 13
    catorce: 14
    quince: 15
    dieciseis: 16
    dieciséis: 16
    diecisiete: 17
    dieciocho: 18
    diecinueve: 19
    veinte: 20
    ventiuna: 21 
    veintiun: 21 
    veintiún: 21 
    veintidos: 22 
    veintitres: 23 
    veinticuatro: 24 
    veinticinco: 25 
    veintiseis: 26 
    veintisiete: 27 
    veintiocho: 28 
    veintinueve: 29 
    treinta: 30
    cuarenta: 40
    cincuenta: 50
    sesenta: 60
    setenta: 70
    ochenta: 80
    noventa: 90
    cien: 100 
    doscientos: 200
    trescientos: 300
    cuatrocientos: 400
    quinientos: 500
    seiscientos: 600
    setecientos: 700
    ochocientos: 800
    novecientos: 900
SuffixOrdinalMap: !dictionary
  types: [ string, long ]
  entries:
    milesimo: 1000 
    millonesimo: 1000000 
    billonesimo: 1000000000000
RoundNumberMap: !dictionary
  types: [ string, long ]
  entries:
    mil: 1000
    milesimo: 1000
    millon: 1000000
    millón: 1000000
    millones: 1000000
    millonesimo: 1000000
    billon: 1000000000000
    billón: 1000000000000
    billones: 1000000000000
    billonesimo: 1000000000000
    trillon: 1000000000000000000
    trillón: 1000000000000000000
    trillones: 1000000000000000000
    trillonesimo: 1000000000000000000
    docena: 12
    docenas: 12
    k: 1000
    m: 1000000
    g: 1000000000
    b: 1000000000
    t: 1000000000000
AmbiguityFiltersDict: !dictionary
  types: [ string, string ]
  entries:
    '^[.]': ''
RelativeReferenceOffsetMap: !dictionary
  types: [ string, string ]
# TODO: modify below regex according to the counterpart in English
  entries:
    '': ''
RelativeReferenceRelativeToMap: !dictionary
  types: [ string, string ]
# TODO: modify below regex according to the counterpart in English
  entries:
    '': ''
...