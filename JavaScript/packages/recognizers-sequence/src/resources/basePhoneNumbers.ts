// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// ------------------------------------------------------------------------------

export namespace BasePhoneNumbers {
    export const NumberReplaceToken = `@builtin.phonenumber`;
    export const WordBoundariesRegex = `\\b`;
    export const NonWordBoundariesRegex = `\\B`;
    export const EndWordBoundariesRegex = `\\b`;
    export const PreCheckPhoneNumberRegex = `(\\d{1,4}.){2,4}\\s?\\d{2,3}`;
    export const GeneralPhoneNumberRegex = (WordBoundariesRegex: string, EndWordBoundariesRegex: string) => { return `(${WordBoundariesRegex}(((\\d[\\s]?){4,12}))(-?[\\d\\s?]{3}\\d)(?!-)${EndWordBoundariesRegex})|(\\(\\d{5}\\)\\s?\\d{5,6})|\\+\\d{2}\\(\\d\\)\\d{10}`; }
    export const BRPhoneNumberRegex = (WordBoundariesRegex: string, NonWordBoundariesRegex: string, EndWordBoundariesRegex: string) => { return `((\\(\\s?(\\+\\s?|00)55\\s?\\)\\s?)|(((?<!\\d)\\+\\s?|${WordBoundariesRegex}00)55\\s?)|${WordBoundariesRegex})?(((${NonWordBoundariesRegex}\\(\\s?))\\d{2,3}(\\s?\\))|(${WordBoundariesRegex}\\d{2,3}))\\s?\\d{4,5}-?\\d{3,5}(?!-)${EndWordBoundariesRegex}`; }
    export const UKPhoneNumberRegex = (WordBoundariesRegex: string, NonWordBoundariesRegex: string, EndWordBoundariesRegex: string) => { return `(((${WordBoundariesRegex}(00)|${NonWordBoundariesRegex}\\+)\\s?)?(${WordBoundariesRegex}\\d{2}\\s?)?((\\s?\\(0\\)[-\\s]?|${WordBoundariesRegex}|(?<=(\\b^#)\\d{2}))\\d{2,5}|\\(0\\d{3,4}\\))[/-]?\\s?(\\d{5,8}|\\d{3,4}[-\\s]?\\d{3,4})(?!-)${EndWordBoundariesRegex})`; }
    export const DEPhoneNumberRegex = (WordBoundariesRegex: string, EndWordBoundariesRegex: string) => { return `((\\+\\d{2}\\s?((\\(0\\))?\\d\\s?)?|${WordBoundariesRegex})(\\d{2,4}\\s?[-/]?[\\s\\d]{7,10}\\d)(?!-)${EndWordBoundariesRegex})`; }
    export const USPhoneNumberRegex = (WordBoundariesRegex: string, NonWordBoundariesRegex: string, EndWordBoundariesRegex: string) => { return `(((((${NonWordBoundariesRegex}\\+)|${WordBoundariesRegex})1(\\s|-)?)|${WordBoundariesRegex})?(\\d{3}\\)[-\\s]?|\\(\\d{3}\\)[-\\.\\s]?|${WordBoundariesRegex}\\d{3}\\s?[-\\.]?\\s?)|${WordBoundariesRegex})[2-9]\\d{2}\\s?[-\\.]?\\s?\\d{4}(\\s?(x|X|ext)\\s?\\d{3,5})?(?!(-\\s?\\d))${EndWordBoundariesRegex}`; }
    export const CNPhoneNumberRegex = (WordBoundariesRegex: string, EndWordBoundariesRegex: string) => { return `((${WordBoundariesRegex}00\\s?)?\\+?(86|82|81)\\s?-?\\s?)?(((${WordBoundariesRegex}|(?<=(86|82|81)))\\d{2,5}\\s?-?\\s?|\\(\\d{2,5}\\)\\s?)\\d{4}\\s?-?\\s?\\d{4}(\\s?-?\\s?\\d{4})?|(\\b|(?<=(86|82|81)))\\d{3}\\s?-?\\s?\\d{4}\\s?-?\\s?\\d{4})(?!-)${EndWordBoundariesRegex}`; }
    export const DKPhoneNumberRegex = (WordBoundariesRegex: string, EndWordBoundariesRegex: string) => { return `((\\(\\s?(\\+\\s?|00)45\\s?\\)\\s?)|(((?<!\\d)\\+\\s?|\\b00)45\\s?)|${WordBoundariesRegex})(\\s?\\(0\\)\\s?)?((\\d{8})|(\\d{4}\\s?-?\\s?\\d{4,6})|((\\d{2}[\\s-]){3}\\d{2})|(\\d{2}\\s?-?\\s?\\d{3}\\s?-?\\s?\\d{3}))(?!-)${EndWordBoundariesRegex}`; }
    export const ITPhoneNumberRegex = (WordBoundariesRegex: string, EndWordBoundariesRegex: string) => { return `((\\(\\s?(\\+\\s?|00)39\\s?\\)\\s?)|(((?<!\\d)\\+\\s?|\\b00)39\\s?)|${WordBoundariesRegex})((0[\\d-]{4,12}\\d)|(3[\\d-]{7,12}\\d)|(0[\\d\\s]{4,12}\\d)|(3[\\d\\s]{7,12}\\d))(?!-)${EndWordBoundariesRegex}`; }
    export const NLPhoneNumberRegex = (WordBoundariesRegex: string, EndWordBoundariesRegex: string) => { return `((((\\(\\s?(\\+\\s?|00)31\\s?\\)\\s?)|(((?<!\\d)\\+\\s?|${WordBoundariesRegex}00)31\\s?))?(((${WordBoundariesRegex}|(?<=31))0?\\d{1,3}|\\(\\s?0?\\d{1,3}\\s?\\)|\\(0\\)[-\\s]?\\d{1,3})((-?[\\d]{5,11})|(\\s[\\d\\s]{5,11}))\\d))|\\b\\d{10,12})(?!-)${EndWordBoundariesRegex}`; }
    export const SpecialPhoneNumberRegex = (WordBoundariesRegex: string, EndWordBoundariesRegex: string) => { return `(${WordBoundariesRegex}(\\d{3,4}[/-]\\d{1,4}[/-]\\d{3,4})${EndWordBoundariesRegex})`; }
    export const NoAreaCodeUSPhoneNumberRegex = `(?<!(-|-\\s|\\d|\\)|\\)\\s|\\.))[2-9]\\d{2}\\s?[-\\.]\\s?\\d{4}(?!(-\\s?\\d))\\b`;
    export const InternationDialingPrefixRegex = `0(0|11)$`;
    export const TypicalDeductionRegexList = [ "^\\d{5}-\\d{4}$","\\)\\.","^0(0|11)(-)" ];
    export const PhoneNumberMaskRegex = `([0-9a-e]{2}(\\s[0-9a-e]{2}){7})`;
    export const CountryCodeRegex = `^(\\(\\s?(\\+\\s?|00)\\d{1,3}\\s?\\)|(\\+\\s?|00)\\d{1,3})`;
    export const AreaCodeIndicatorRegex = `\\(`;
    export const FormatIndicatorRegex = `(\\s|-|/|\\.)+`;
    export const ColonMarkers = [ ":" ];
    export const ColonPrefixCheckRegex = `(([a-z])\\s*$)`;
    export const AmbiguityFiltersDict: ReadonlyMap<string, string> = new Map<string, string>([["^\\d{4}-\\d{4}$", "omb(\\s*(no(\\.)?|number|#))?:?\\s+\\d{4}-?\\d{4}"]]);
    export const SpecialBoundaryMarkers = [ "-"," " ];
    export const BoundaryMarkers = [ "-",".","/","+","#","*" ];
    export const ForbiddenPrefixMarkers = [ ",",":","%" ];
    export const ForbiddenSuffixMarkers = [ "/","+","#","*",":","%" ];
    export const SSNFilterRegex = `^\\d{3}-\\d{2}-\\d{4}$`;
}
