// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// ------------------------------------------------------------------------------

import { BaseNumbers } from "./baseNumbers";
export namespace HebrewNumeric {
    export const LangMarker = `Heb`;
    export const CompoundNumberLanguage = false;
    export const MultiDecimalSeparatorCulture = true;
    export const RoundNumberIntegerRegex = `(?:מאתיים|טריליון|טריליון|אלפים|טריליון|טריליונים|מיליארד|מיליארדים|מיליון|אלף|מאה|אלפיים|אלף)`;
    export const ZeroToNineIntegerRegex = `(:?אחד|שניים|שלוש|ארבע|חמש|שש|שבע|שמונה|תשע|אחת|שתיים|שלושה|ארבעה|חמישה|ששה|שישה|שבעה|שמונה|תשעה|רביעית|חמישית|שישית|שבעית|שמינית|תשעית|תישעית|רביעי|חמישי|שישי|שביעי|שמיני|תשעי|תישעי|אפס)`;
    export const TwoToNineIntegerRegex = `(:?שניים|שלוש|ארבע|חמש|שש|שבע|שמונה|תשע|שתיים|שלושה|ארבעה|חמישה|ששה|שישה|שבעה|שמונה|תשעה|רביעית|חמישית|שישית|שבעית|שמינית|תשעית|תישעית|רביעי|חמישי|שישי|שביעי|שמיני|תשעי|תישעי)`;
    export const NegativeNumberTermsRegex = `(?<negTerm>(מינוס)(\\s+)?)`;
    export const NegativeNumberSignRegex = `^${NegativeNumberTermsRegex}.*`;
    export const AnIntRegex = `(אחד|אחת)(?=\\s)`;
    export const TenToNineteenIntegerRegex = `(?:((אחד|שנים|שלוש|ארבע|חמש|שש|שבע|שמונה|תשע|אחת|שתיים|שלושה|ארבעה|חמישה|ששה|שבעה|שמונה|תשעה)(\\s|-)(עשר|עשרה)))`;
    export const TensNumberIntegerRegex = `(?:עשר|עשרים|שלושים|ארבעים|חמישים|שישים|שבעים|שמונים|תשעים)`;
    export const SeparaIntRegex = `(?:(((${RoundNumberIntegerRegex}\\s${RoundNumberIntegerRegex})|${TenToNineteenIntegerRegex}|(${ZeroToNineIntegerRegex}(((و)?)\\s+(و)?|\\s*-\\s*)${TensNumberIntegerRegex})|${TensNumberIntegerRegex}|${ZeroToNineIntegerRegex}|${RoundNumberIntegerRegex})(\\s+${RoundNumberIntegerRegex})*))|(((\\s+${RoundNumberIntegerRegex})+))`;
    export const AllIntRegex = `(?:(${SeparaIntRegex})((\\s+(و)?)(${SeparaIntRegex})(\\s+${RoundNumberIntegerRegex})?)*|(((${TenToNineteenIntegerRegex}|(${TensNumberIntegerRegex}(\\s+(و)?|\\s*-\\s*)${ZeroToNineIntegerRegex})|${TensNumberIntegerRegex}|${ZeroToNineIntegerRegex})?(\\s+${RoundNumberIntegerRegex})+)\\s+(و)?)*${SeparaIntRegex})`;
    export const PlaceHolderPureNumber = `\\b`;
    export const PlaceHolderDefault = `\\D|\\b`;
    export const NumbersWithPlaceHolder = (placeholder: string) => { return `(((?<!\\d+\\s*)([-]\\s*)?)|(?<=\\b))\\d+(?!([\\.،,]\\d+[\\u0621-\\u064A]))(?=${placeholder})`; }
    export const NumbersWithSuffix = `(((?<!\\d+\\s*)([-]\\s*)?)|(?<=\\b))\\d+\\s*${BaseNumbers.NumberMultiplierRegex}(?=\\b)`;
    export const RoundNumberIntegerRegexWithLocks = `(?<=\\b)(\\d+\\s*(${RoundNumberIntegerRegex})(\\s|و\\s|\\sو))?\\d+(\\s|و\\s|\\sو)+${RoundNumberIntegerRegex}((\\s*و\\s*)+\\d+)?(?=\\b)`;
    export const NumbersWithDozenSuffix = `(((?<!\\d+\\s*)([-]\\s*)?)|(?<=\\b))(\\d+\\s+)?(תריסר|עשרות)(?=\\b)`;
    export const AllIntRegexWithLocks = `((?<=\\b)${AllIntRegex}(?=\\b))`;
    export const AllIntRegexWithDozenSuffixLocks = `(?<=\\b)(((חצי\\s+)(תריסר))|(${AllIntRegex}(و)?\\s+((و)?))(תריסר))(?=\\b)`;
    export const RoundNumberOrdinalRegex = `(?:((מ|ואילך)\\s+)(${RoundNumberIntegerRegex}))`;
    export const NumberOrdinalRegex = `(?:ראשון|שני|שלישי|רביעי|חמישי|שישי|ששי|שביעי|שמיני|תשעי|עשירי|ראשונה|שנייה|שלישית|רביעית|חמישית|שישית|שביעית|שמינית|עשירית)`;
    export const RelativeOrdinalRegex = `(?<relativeOrdinal>)הקודם|הנוכחי|הבא|לפני אחרון|אחרון)`;
    export const BasicOrdinalRegex = `(${NumberOrdinalRegex}|${RelativeOrdinalRegex})`;
    export const SuffixBasicOrdinalRegex = `(?:((((${TensNumberIntegerRegex}(\\s+(و)?|\\s*)${ZeroToNineIntegerRegex})|${TensNumberIntegerRegex}|${ZeroToNineIntegerRegex}|(${RoundNumberIntegerRegex}|מאה(\\s+(و)?)))((\\s+${RoundNumberIntegerRegex}|מאה)+|(${BasicOrdinalRegex})))\\s+(و)?)*(${TensNumberIntegerRegex}(\\s+|\\s*))?${BasicOrdinalRegex}|(${TensNumberIntegerRegex}))`;
    export const SuffixRoundNumberOrdinalRegex = `(?:(${AllIntRegex}\\s+)${RoundNumberOrdinalRegex})`;
    export const AllOrdinalRegex = `(?:${SuffixBasicOrdinalRegex}|${SuffixRoundNumberOrdinalRegex})`;
    export const OrdinalNumericRegex = `(?<=\\b)(?:\\d{1,3}(\\s*,\\s*\\d{3})*\\s*th)(?=\\b)`;
    export const OrdinalRoundNumberRegex = `(${RoundNumberOrdinalRegex})`;
    export const OrdinalEnglishRegex = `(?<=\\b)${AllOrdinalRegex}(?=\\b)`;
    export const FractionNotationWithSpacesRegex = `(((?<={?[\\u0600-\\u06ff]}|^)-\\s*)|(?<=\\b))\\d+\\s+\\d+[/]\\d+(?=(\\b[^/]|$))`;
    export const FractionNotationWithSpacesRegex2 = `(((?<={?[\\u0600-\\u06ff]}|^)-\\s*)|(?<![/-])(?<=\\b))\\d+[/]\\d+(?=(\\b[^/]|$))(\\s*\\d+)`;
    export const FractionNotationRegex = `(((?<={?[\\u0600-\\u06ff]}|^)-\\s*)|(?<![/-])(?<=\\b))\\d+[/]\\d+(?=(\\b[^/]|$))`;
    export const HebrewBuiltInFraction = `(?:חצי|עשירית|רבע|שליש)`;
    export const FractionOrdinalPrefix = `(الوزن|المحتوى:?)`;
    export const FractionNounRegex = `(?<=\\b)${HebrewBuiltInFraction}|${AllIntRegex}\\s(و\\s|و)${HebrewBuiltInFraction}|((${AllIntRegex}\\s(و\\s|و)?)?(${AllIntRegex})(\\s+|\\s*)((${AllOrdinalRegex})|(${RoundNumberOrdinalRegex})|רבעים|ורבע|חצאיים|חצאים|וחצי|שליש|ושליש|רבע|רביעיות|חמישיות|עשיריות|חצי|רבע|חצי|שני שליש)(?=\\b)`;
    export const FractionNounWithArticleRegex = `(?<=\\b)(((${AllIntRegex}(\\s|(\\s*-\\s*)|و\\s+)?)((${AllOrdinalRegex})|${NumberOrdinalRegex}|וחצי|ושליש|ורבע))|(החצי|השליש|הרבע|))(?=\\b)`;
    export const FractionPrepositionRegex = `(?<!${BaseNumbers.CommonCurrencySymbol}\\s*)(?<=\\b)(?<numerator>(${AllIntRegex})|((?<![\\.,])\\d+))\\s+(חלקי)\\s+(?<denominator>(${AllIntRegex})|(\\d+)(?![\\.,]))(?=\\b)`;
    export const FractionPrepositionWithinPercentModeRegex = `(?<!${BaseNumbers.CommonCurrencySymbol}\\s*)(?<=\\b)(?<numerator>(${AllIntRegex})|((?<![\\.,])\\d+))\\s+על\\s+(?<denominator>(${AllIntRegex})|(\\d+)(?![\\.,]))(?=\\b)`;
    export const FractionWithOrdinalPrefix = `(${AllOrdinalRegex})(?=\\s*(${FractionOrdinalPrefix}))`;
    export const FractionWithPartOfPrefix = `((جزء من)\\s+)(${AllIntRegexWithLocks})`;
    export const AllPointRegex = `((\\s+${ZeroToNineIntegerRegex})+|(\\s+${SeparaIntRegex}))`;
    export const AllFloatRegex = `${AllIntRegex}(\\s+(נקודה))${AllPointRegex}`;
    export const DoubleWithMultiplierRegex = `(((?<!\\d+\\s*)([-]\\s*)?)|((?<=\\b)(?<!\\d+[\\.,])))\\d+\\u202A?[\\.,]\\u202A?\\d+\\s*${BaseNumbers.NumberMultiplierRegex}(?=\\b)`;
    export const DoubleExponentialNotationRegex = `(((?<!\\d+\\s*)([-]\\s*)?)|((?<=\\b)(?<!\\d+[\\.,])))(\\d+(\\u202A?[\\.,]\\u202A?\\d+)?)e([+-]*[\\u0660-\\u0669]\\d*)(?=\\b)`;
    export const DoubleCaretExponentialNotationRegex = `(((?<!\\d+\\s*)([-]\\s*)?)|((?<=\\b)(?<!\\d+[\\.,])))(\\d+(\\u202A?[\\.,]\\u202A?\\d+)?)[+-]*\\^([+-]*[\\u0660-\\u0669]([\\.,])?\\d*)(?=\\b)`;
    export const DoubleDecimalPointRegex = (placeholder: string) => { return `(((?<!\\d+\\s*)([-]\\s*)?)|((?<=\\b)(?<!\\d+[\\.,])))((?<!\\d.)(\\d+\\u202A?[\\.,]\\u202A?\\d+))(?!([\\.,]\\d+))(?=${placeholder})`; }
    export const DoubleWithoutIntegralRegex = (placeholder: string) => { return `(?<=\\s|^)(?<!(\\d+))\\u202A?[\\.,]\\u202A?\\d+(?!([\\.,]\\d+))(?=${placeholder})`; }
    export const DoubleWithRoundNumber = `(((?<!\\d+\\s*)([-]\\s*)?)|((?<=\\b)(?<!\\d+[\\.,])))\\d+\\u202A?[\\.,]\\u202A?\\d+\\s+${RoundNumberIntegerRegex}(?=\\b)`;
    export const DoubleWithThousandMarkRegex = (placeholder: string) => { return `(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+\\.|\\d+,)))\\d{1,3}(\\u202A?[،]\\u202A?\\d{3})+\\u202A?[\\.,]\\u202A?\\d+(?=${placeholder})`; }
    export const DoubleAllFloatRegex = `((?<=\\b)${AllFloatRegex}(?=\\b))`;
    export const ConnectorRegex = `(?<spacer>و)`;
    export const NumberWithSuffixPercentage = `((?<!(٪|%))(${BaseNumbers.NumberReplaceToken})(\\s*)((٪|%)(?!${BaseNumbers.NumberReplaceToken})|(אחוזים|אחוז)))`;
    export const FractionNumberWithSuffixPercentage = `((${BaseNumbers.FractionNumberReplaceToken})\\s+(מ))`;
    export const NumberWithPrefixPercentage = `(אחוזים|אחוז)(\\s*)(${BaseNumbers.NumberReplaceToken})`;
    export const NumberWithPrepositionPercentage = `(${BaseNumbers.NumberReplaceToken})\\s*(מ)\\s*(${BaseNumbers.NumberReplaceToken})`;
    export const TillRegex = `(ל|--|-|—|——|~|–)`;
    export const MoreRegex = `(?:(יותר)|(?<!<|=)>)`;
    export const LessRegex = `(?:(פחות)(\\s*מ)?|(?<!>|=)<)`;
    export const EqualRegex = `(שווה|(?<!<|>)=)`;
    export const MoreOrEqualPrefix = `(((לא)\\s+${LessRegex})|(على\\s+الأقل))`;
    export const MoreOrEqual = `(?:((${MoreRegex}(\\s+من)?)\\s+(أو|او)?\\s+${EqualRegex})|((${MoreOrEqualPrefix}|(تفوق))(\\s+(أو|او)?\\s+${EqualRegex})?)|((${EqualRegex}\\s+(أو|او)?\\s+)?(${MoreOrEqualPrefix}|تفوق))|>\\s*=)`;
    export const MoreOrEqualSuffix = `((أو|او)\\s+(((أكبر|أعظم|أطول|فوق|اكثر|اكثر|اكبر|أكثر)((?!\\s+من)|(\\s+من(?!(\\s*\\d+)))))|((فوق|أكبر|أطول|اكثر)(?!\\s+من))))`;
    export const LessOrEqualPrefix = `((ليس\\s+${MoreRegex})|(at\\s+most)|(بحد أقصى)|(يصل الى))`;
    export const LessOrEqual = `(((لا\\s*)?${LessRegex}\\s+(أو|او)?\\s+${EqualRegex})|(${EqualRegex}\\s+(أو|او)?\\s+(((أقل|اقل|أدنى|اصغر|أصغر|ادنى)(\\s+من))|تحت|(?<!>|=)<))|(${LessOrEqualPrefix}(\\s+(أو|او)?\\s+${EqualRegex})?)|((${EqualRegex}\\s+(أو|او)?\\s+)?${LessOrEqualPrefix})|<\\s*=)`;
    export const LessOrEqualSuffix = `((أ|ا)?و\\s+(أقل)((?!\\s+من)|(\\s+من(?!(\\s*\\d+)))))`;
    export const NumberSplitMark = `(?![.،](?!\\d+))`;
    export const MoreRegexNoNumberSucceed = `((أكبر|أعظم|أطول|فوق|اكثر)((?!\\s+من)|\\s+(من(?!(\\s*\\d+))))|(فوق|أكبر|أعظم)(?!(\\s*\\d+)))`;
    export const LessRegexNoNumberSucceed = `((أقل|أصغر)((?!\\s+من)|\\s+(من(?!(\\s*\\d+))))|(تحت|اقل|أقل|أصغر)(?!((\\s*\\d+)|\\s*من)))`;
    export const EqualRegexNoNumberSucceed = `((يساوي)(?!(\\s*\\d+)))`;
    export const OneNumberRangeMoreRegex1 = `(${MoreOrEqual})\\s*(ال)?(?<number1>(${NumberSplitMark}.)+)|(${EqualRegex}\\s*(أو|او)?\\s+(${MoreRegex}))(\\s+(من))\\s*(?<number1>(${NumberSplitMark}.)+)|(${EqualRegex}\\s+(أو|او)?\\s+(${MoreRegex}))\\s*(?<number1>(${NumberSplitMark}.)+)|(${MoreRegex})(\\s+(من))\\s*(?<number1>(${NumberSplitMark}.)+)|(${MoreRegex})\\s*(?<number1>(${NumberSplitMark}.)+)`;
    export const OneNumberRangeMoreRegex3 = `(?<number1>(${NumberSplitMark}.)+)\\s*(و|أو)\\s*(${MoreRegex})`;
    export const OneNumberRangeMoreRegex2 = `(?<number1>(${NumberSplitMark}.)+)\\s*${MoreOrEqualSuffix}`;
    export const OneNumberRangeMoreSeparateRegex = `(${MoreRegex}\\s*(من)\\s+(?<number1>(${NumberSplitMark}.)+)\\s+(أو|او)\\s+${EqualRegexNoNumberSucceed})|(${EqualRegex}\\s+(?<number1>(${NumberSplitMark}.)+)(\\s+(أو|او)\\s+)${MoreRegexNoNumberSucceed})|(${MoreRegex}\\s+(?<number1>(${NumberSplitMark}.)+)(\\s+(أو|او)\\s+)${EqualRegexNoNumberSucceed})`;
    export const OneNumberRangeLessRegex1 = `((${LessOrEqual})\\s*(ال)?(?<number2>(${NumberSplitMark}.)+))|(لا\\s*)?((((أقل|اقل|أدنى|اصغر|أصغر|ادنى)(\\s+من))|تحت|(?<!>|=)<))\\s*(ال)?(?<number2>(${NumberSplitMark}.)+)|(لا\\s*)?((${LessRegex})\\s*(ال)?(?<number2>(${NumberSplitMark}.)+))`;
    export const OneNumberRangeLessRegex2 = `(?<number2>(${NumberSplitMark}.)+)\\s*${LessOrEqualSuffix}`;
    export const OneNumberRangeLessSeparateRegex = `(${EqualRegex}\\s+(?<number1>(${NumberSplitMark}.)+)\\s*(أو|او)\\s+${LessRegexNoNumberSucceed})|(((((أقل|اقل|أدنى|اصغر|أصغر|ادنى)(\\s+من))|تحت|(?<!>|=)<))\\s+(?<number1>(${NumberSplitMark}.)+)(\\s+(أو|او)\\s+)${EqualRegexNoNumberSucceed})`;
    export const OneNumberRangeEqualRegex = `${EqualRegex}\\s*(ال)?(?<number1>(${NumberSplitMark}.)+)`;
    export const TwoNumberRangeRegex1 = `بين\\s*(ال)?(?<number1>(${NumberSplitMark}.)+)\\s*و\\s*(ال)?(?<number2>(${NumberSplitMark}.)+)`;
    export const TwoNumberRangeRegex2 = `(${OneNumberRangeMoreRegex1}|${OneNumberRangeMoreRegex2})\\s*(،)?\\s*((أ|ا)?و|لكن|,)\\s*(${OneNumberRangeLessRegex1}|${OneNumberRangeLessRegex2})`;
    export const TwoNumberRangeRegex3 = `(${OneNumberRangeLessRegex1}|${OneNumberRangeLessRegex2})\\s*(،)?\\s*((أ|ا)?و|لكن|,)\\s*(${OneNumberRangeMoreRegex1}|${OneNumberRangeMoreRegex2})`;
    export const TwoNumberRangeRegex4 = `((من\\s)(?<number1>(${NumberSplitMark}(?!\\bمن\\b).)+)\\s*${TillRegex}\\s*(ال\\s+)?(?<number2>(${NumberSplitMark}.)+))|((من\\s)?(?<number1>(${NumberSplitMark}(?!\\bمن\\b).)+)\\s*${TillRegex}\\s*(ال\\s+)?(?<number2>(${NumberSplitMark}.)+))`;
    export const AmbiguousFractionConnectorsRegex = `(\\bمن|بين|من|بين\\b)`;
    export const DecimalSeparatorChar = `,`;
    export const FractionMarkerToken = `על`;
    export const NonDecimalSeparatorChar = `،`;
    export const HalfADozenText = `שש`;
    export const WordSeparatorToken = `ו`;
    export const WrittenDecimalSeparatorTexts = [ "נקודה | פסיק" ];
    export const WrittenGroupSeparatorTexts = [ "punto" ];
    export const WrittenIntegerSeparatorTexts = [ "ו" ];
    export const WrittenFractionSeparatorTexts = [ "ו" ];
    export const HalfADozenRegex = `نصف?\\sدستة`;
    export const DigitalNumberRegex = `((?<=\\b)(مائة|مائتان|دست|دستات|ألف|ألفين|مائتين|ألفين|ثلاثمائة|أربعمائة|خمسمائة|ستمائة|سبعمائة|تسعمائة|ثمانمائة|مليون|مليار|ترليون)(?=\\b))|((?<=(\\d|\\b))${BaseNumbers.MultiplierLookupRegex}(?=\\b))`;
    export const CardinalNumberMap: ReadonlyMap<string, number> = new Map<string, number>([["אחד", 1],["אפס", 0],["שתיים", 2],["שניים", 2],["שלוש", 3],["שלושה", 3],["ארבע", 4],["ארבעה", 4],["חמש", 5],["חמשה", 5],["שש", 6],["ששה", 6],["שבע", 7],["שבעה", 7],["שמונה", 8],["תשע", 9],["תשעה", 9],["עשר", 10],["עשרה", 10],["אחת עשרה", 11],["שנים עשר", 12],["תריסר", 12],["שלוש עשרה", 13],["ארבעה עשר", 14],["חמש עשרה", 15],["שש עשרה", 16],["שבע עשרה", 17],["שמונה עשרה", 18],["תשע עשרה", 19],["עשרים", 20],["שלושים", 30],["ארבעים", 40],["חמישים", 50],["שישים", 60],["שבעים", 70],["שיבעים", 70],["שמונים", 80],["תשעים", 90],["תישעים", 90],["מאה", 100],["מאתיים", 200],["שלוש מאות", 300],["ארבע מאות", 400],["חמש מאות", 500],["שש מאות", 600],["שבע מאות", 700],["שמונה מאות", 800],["תשע מאות", 900],["אלף", 1000],["אלפיים", 2000],["מיליון", 1000000],["מיליארד", 1000000000],["ביליון", 1000000000],["טריליון", 1000000000000]]);
    export const OrdinalNumberMap: ReadonlyMap<string, number> = new Map<string, number>([["הראשון", 1],["ראשית", 1],["שני", 2],["שנית", 2],["שלישית", 3],["רבע", 4],["רביעית", 4],["חמש", 5],["חמישית", 5],["שישית", 6],["השישית", 6],["שבע", 7],["שביעי", 7],["שמינית", 8],["שמונה", 8],["תשע", 9],["תשיעי", 9],["עשירית", 10],["אחת עשרה", 11],["שתיים עשרה", 12],["שלוש עשרה", 13],["ארבעה עשר", 14],["ארבע עשרה", 14],["חמש עשרה", 15],["שש עשרה", 16],["שישה עשר", 16],["שבע עשרה", 17],["שמונה עשרה", 18],["תשע עשרה", 19],["עשר", 10],["עשרים", 20],["עשרים ואחד", 21],["עשרים ושניים", 22],["עשרים ושלוש", 23],["עשרים וארבע", 24],["עשרים וחמישה", 25],["עשרים ושישה", 26],["עשרים ושבע", 27],["עשרים ושמונה", 28],["עשרים ותשע", 29],["שלושים", 30],["ארבעים", 40],["חמישים", 50],["שישים", 60],["שבעים", 70],["שמונים", 80],["תשעים", 90],["מאה", 100],["מאתיים", 200],["שלוש מאות", 300],["ארבע מאות", 400],["חמש מאות", 500],["שש מאות", 600],["שבע מאות", 700],["שמונה מאות", 800],["תשע מאות", 100],["אלף", 1000],["מיליון", 1000000],["מיליארד", 1000000000],["טריליון", 1000000000000]]);
    export const RoundNumberMap: ReadonlyMap<string, number> = new Map<string, number>([["מאה", 100],["אלף", 1000],["מיליון", 1000000],["מיליארד", 1000000000],["טריליון", 1000000000000],["מאתיים", 200],["שלוש מאות", 300],["ארבע מאות", 400],["חמש מאות", 500],["שש מאות", 600],["שבע מאות", 700],["שמונה מאות", 800],["תשע מאות", 900]]);
    export const AmbiguityFiltersDict: ReadonlyMap<string, string> = new Map<string, string>([["\\bאחד\\b", "\\b(איזה)\\s+(אחד)\\b"]]);
    export const RelativeReferenceOffsetMap: ReadonlyMap<string, string> = new Map<string, string>([["אחרונה", ""],["אחרון", ""],["נוכחי", ""],["הקודם", ""],["הלפני אחרון", ""],["הבא", ""],["אחרי הבא", ""],["הראשון", ""],["ראשית", ""]]);
    export const RelativeReferenceRelativeToMap: ReadonlyMap<string, string> = new Map<string, string>([["נוכחי", "current"],["אחרון", "end"],["לפני אחרון", "end"]]);
}
